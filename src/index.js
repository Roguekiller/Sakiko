const { Client, Collection, GatewayIntentBits, Partials } = require('discord.js');
const { token, prefix } = require('../config.json');
const fs = require('node:fs');
const path = require('node:path');


//Creating new client object, with required intents to interact with the server.
const client = new Client({ 
	intents: [
	GatewayIntentBits.Guilds,
	GatewayIntentBits.GuildMessages,
	GatewayIntentBits.GuildMembers,
	GatewayIntentBits.DirectMessages,
	GatewayIntentBits.MessageContent,
	GatewayIntentBits.GuildVoiceStates
	],
	partials: [Partials.Channel],
});

//Create a new collection to contain the command name and data.
//Also finds commands path using path.join inside of the commands folder. Only grabbing js files.
client.commands = new Collection();
const commandsPath = path.join(__dirname, '../commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

//Loop through command files and append command name and command file into the collection.
for (const file of commandFiles) {
	const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    client.commands.set(command.data.name, command);
}

// Same logic for the commands.
const eventsPath = path.join(__dirname, '../events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));


for (const file of eventFiles) {
	const filePath = path.join(eventsPath, file);
	const event = require(filePath);
	if (event.once) {
		client.once(event.name, (...args) => event.execute(...args));
	} else {
		client.on(event.name, (...args) => event.execute(...args));
	}
}

//Login the token using the token generated by discord developer portal.
client.login(token);